//
//  Spellcasting.swift
//  Path2e
//
//  Created by Ryan Weber on 7/25/23.
//

import Foundation


func returnSpellSlotDictionary(type: String) -> [Int:[Int]] {
    var spellSlots: [Int:[Int]]? = nil
    if type == "Three-Quarters" {
        spellSlots = [1:[5,2,0,0,0,0,0,0,0,0,0],2:[5,3,0,0,0,0,0,0,0,0,0],3:[5,3,2,0,0,0,0,0,0,0,0],4:[5,3,3,0,0,0,0,0,0,0,0],5:[5,3,3,2,0,0,0,0,0,0,0],6:[5,3,3,3,0,0,0,0,0,0,0],7:[5,3,3,3,2,0,0,0,0,0,0],8:[5,3,3,3,3,0,0,0,0,0,0],9:[5,3,3,3,3,2,0,0,0,0,0],10:[5,3,3,3,3,3,0,0,0,0,0],11:[5,3,3,3,3,3,2,0,0,0,0],12:[5,3,3,3,3,3,3,0,0,0,0],13:[5,3,3,3,3,3,3,2,0,0,0],14:[5,3,3,3,3,3,3,3,0,0,0],15:[5,3,3,3,3,3,3,3,2,0,0],16:[5,3,3,3,3,3,3,3,3,0,0],17:[5,3,3,3,3,3,3,3,3,2,0],18:[5,3,3,3,3,3,3,3,3,3,0],19:[5,3,3,3,3,3,3,3,3,3,1],20:[5,3,3,3,3,3,3,3,3,3,1]]
    } else if type == "Full" {
        spellSlots = [1:[5,3,0,0,0,0,0,0,0,0,0],2:[5,4,0,0,0,0,0,0,0,0,0],3:[5,4,3,0,0,0,0,0,0,0,0],4:[5,4,4,0,0,0,0,0,0,0,0],5:[5,4,4,3,0,0,0,0,0,0,0],6:[5,4,4,4,0,0,0,0,0,0,0],7:[5,4,4,4,3,0,0,0,0,0,0],8:[5,4,4,4,4,0,0,0,0,0,0],9:[5,4,4,4,4,3,0,0,0,0,0],10:[5,4,4,4,4,4,0,0,0,0,0],11:[5,4,4,4,4,4,3,0,0,0,0],12:[5,4,4,4,4,4,4,0,0,0,0],13:[5,4,4,4,4,4,4,3,0,0,0],14:[5,4,4,4,4,4,4,4,0,0,0],15:[5,4,4,4,4,4,4,4,3,0,0],16:[5,4,4,4,4,4,4,4,4,0,0],17:[5,4,4,4,4,4,4,4,4,3,0],18:[5,4,4,4,4,4,4,4,4,4,0],19:[5,4,4,4,4,4,4,4,4,4,1],20:[5,4,4,4,4,4,4,4,4,4,1]]
    } else if type == "Psy-Reduced" {
        spellSlots = [1:[3,1,0,0,0,0,0,0,0,0,0],2:[3,2,0,0,0,0,0,0,0,0,0],3:[3,2,1,0,0,0,0,0,0,0,0],4:[3,2,2,0,0,0,0,0,0,0,0],5:[3,2,2,1,0,0,0,0,0,0,0],6:[3,2,2,2,0,0,0,0,0,0,0],7:[3,2,2,2,1,0,0,0,0,0,0],8:[3,2,2,2,2,0,0,0,0,0,0],9:[3,2,2,2,2,1,0,0,0,0,0],10:[3,2,2,2,2,2,0,0,0,0,0],11:[3,2,2,2,2,2,1,0,0,0,0],12:[3,2,2,2,2,2,2,0,0,0,0],13:[3,2,2,2,2,2,2,1,0,0,0],14:[3,2,2,2,2,2,2,2,0,0,0],15:[3,2,2,2,2,2,2,2,1,0,0],16:[3,2,2,2,2,2,2,2,2,0,0],17:[3,2,2,2,2,2,2,2,2,1,0],18:[3,2,2,2,2,2,2,2,2,2,0],19:[3,2,2,2,2,2,2,2,2,2,1],20:[3,2,2,2,2,2,2,2,2,2,1]]
    } else if type == "Partial" {
        spellSlots = [1:[5,1,0,0,0,0,0,0,0,0,0],2:[5,2,0,0,0,0,0,0,0,0,0],3:[5,2,1,0,0,0,0,0,0,0,0],4:[5,2,2,0,0,0,0,0,0,0,0],5:[5,0,2,2,0,0,0,0,0,0,0],6:[5,0,2,2,0,0,0,0,0,0,0],7:[5,0,0,2,2,0,0,0,0,0,0],8:[5,0,0,2,2,0,0,0,0,0,0],9:[5,0,0,0,2,2,0,0,0,0,0],10:[5,0,0,0,2,2,0,0,0,0,0],11:[5,0,0,0,0,2,2,0,0,0,0],12:[5,0,0,0,0,2,2,0,0,0,0],13:[5,0,0,0,0,0,2,2,0,0,0],14:[5,0,0,0,0,0,2,2,0,0,0],15:[5,0,0,0,0,0,0,2,2,0,0],16:[5,0,0,0,0,0,0,2,2,0,0],17:[5,0,0,0,0,0,0,0,2,2,0],18:[5,0,0,0,0,0,0,0,2,2,0],19:[5,0,0,0,0,0,0,0,2,2,0],20:[5,0,0,0,0,0,0,0,2,2,0]]
    } else if type == "Single-Set" {
        spellSlots = [1:[1,1,0,0,0,0,0,0,0,0,0],2:[1,1,0,0,0,0,0,0,0,0,0],3:[1,1,1,0,0,0,0,0,0,0,0],4:[1,1,1,0,0,0,0,0,0,0,0],5:[1,1,1,1,0,0,0,0,0,0,0],6:[1,1,1,1,0,0,0,0,0,0,0],7:[1,1,1,1,1,0,0,0,0,0,0],8:[1,1,1,1,1,0,0,0,0,0,0],9:[1,1,1,1,1,1,0,0,0,0,0],10:[1,1,1,1,1,1,0,0,0,0,0],11:[1,1,1,1,1,1,1,0,0,0,0],12:[1,1,1,1,1,1,1,0,0,0,0],13:[1,1,1,1,1,1,1,1,0,0,0],14:[1,1,1,1,1,1,1,1,0,0,0],15:[1,1,1,1,1,1,1,1,1,0,0],16:[1,1,1,1,1,1,1,1,1,0,0],17:[1,1,1,1,1,1,1,1,1,1,0],18:[1,1,1,1,1,1,1,1,1,1,0],19:[1,1,1,1,1,1,1,1,1,1,0],20:[1,1,1,1,1,1,1,1,1,1,0]]
    }
    return spellSlots!
}


func returnMaxSpellLevel(level: Int) -> Int {
    let levels = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]
    if level <= 20 {
        return levels[level-1]
    } else {
        return 0
    }
}
func returnSpontaneousNewSpellSlots(level: Int, spellSlotType: String) -> [Int] {
    var diff = [0,0,0,0,0,0,0,0,0,0,0]
    var currentLevel: [Int] = [0,0,0,0,0,0,0,0,0,0,0]
    var prevLevel: [Int] = [0,0,0,0,0,0,0,0,0,0,0]
    if level == 1 {
        currentLevel = returnSpellSlotDictionary(type: spellSlotType)[1]!
    } else {
        currentLevel = returnSpellSlotDictionary(type: spellSlotType)[level]!
        prevLevel = returnSpellSlotDictionary(type: spellSlotType)[level-1]!
    }
    for i in currentLevel.indices {
        diff[i] = currentLevel[i] - prevLevel[i]
        if spellSlotType == "Full" {
            if diff[i] > 1 {
                diff[i] -= 1
            }
        }
    }
    return diff
}

func returnPreparedSpellCounts(name: String, level: Int) -> [Int] {
    switch level {
    case 1:
        switch name {
        case "Witch":
            return [10,5,0,0,0,0,0,0,0,0,0]
        case "Wizard":
            return [10,5,0,0,0,0,0,0,0,0,0]
        case "Magus":
            return [8,4,0,0,0,0,0,0,0,0,0]
        default:
            return [0,0,0,0,0,0,0,0,0,0,0]
        }
    case 2:
        return [0,2,0,0,0,0,0,0,0,0,0]
    case 3,4:
        return [0,0,2,0,0,0,0,0,0,0,0]
    case 5,6:
        return [0,0,0,2,0,0,0,0,0,0,0]
    case 7,8:
        return [0,0,0,0,2,0,0,0,0,0,0]
    case 9,10:
        return [0,0,0,0,0,2,0,0,0,0,0]
    case 11,12:
        return [0,0,0,0,0,0,2,0,0,0,0]
    case 13,14:
        return [0,0,0,0,0,0,0,2,0,0,0]
    case 15,16:
        return [0,0,0,0,0,0,0,0,2,0,0]
    case 17,18:
        return [0,0,0,0,0,0,0,0,0,2,0]
    case 19,20:
        return [0,0,0,0,0,0,0,0,0,0,2]
    default:
        return [0,0,0,0,0,0,0,0,0,0,0]
    }
}


func returnSingleSetNewSpellSlots(level: Int) -> [Int] {
    var diff = [0,0,0,0,0,0,0,0,0,0,0]
    var currentLevel: [Int] = [0,0,0,0,0,0,0,0,0,0,0]
    var prevLevel: [Int] = [0,0,0,0,0,0,0,0,0,0,0]
    if level == 1 {
        currentLevel = returnSpellSlotDictionary(type: "Single-Set")[1]!
    } else {
        currentLevel = returnSpellSlotDictionary(type: "Single-Set")[level]!
        prevLevel = returnSpellSlotDictionary(type: "Single-Set")[level-1]!
    }
    for i in currentLevel.indices {
        diff[i] = currentLevel[i] - prevLevel[i]
    }
    return diff
}

func returnSignatureSpellLevel(level: Int) -> [Int]? {
    switch level {
    case 3:
        return [1,2]
    case 5:
        return [3]
    case 7:
        return [4]
    case 9:
        return [5]
    case 11:
        return [6]
    case 13:
        return [7]
    case 15:
        return [8]
    case 17:
        return [9]
    case 19:
        return [10]
    default:
        return nil
    }
}

func returnReplaceSignatureSpellLevel(level: Int) -> Int {
    let levels = [0,0,0,0,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]
    return levels[level]
}
